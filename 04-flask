#--------------------------------------------------------------------
# Instalar con pip install Flask
from flask import Flask, request, jsonify
from flask import request
# Instalar con pip install flask-cors
from flask_cors import CORS
# Instalar con pip install mysql-connector-python
import mysql.connector
# Si es necesario, pip install Werkzeug
from werkzeug.utils import secure_filename
# No es necesario instalar, es parte del sistema standard de Python
import os
import time
#--------------------------------------------------------------------
app = Flask(__name__)
CORS(app) # Esto habilitará CORS para todas las rutas

class Catalogo:
# Constructor de la clase
  def __init__(self, host, user, password, database):
     # Primero, establecemos una conexión sin especificar la base de datos
    self.conn = mysql.connector.connect(
      host=host,
      user=user,
      password=password
    )
    self.cursor = self.conn.cursor()
   # Intentamos seleccionar la base de datos
    try:
       self.cursor.execute(f"USE {database}")
    except mysql.connector.Error as err:
       # Si la base de datos no existe, la creamos
       if err.errno == mysql.connector.errorcode.ER_BAD_DB_ERROR:
          self.cursor.execute(f"CREATE DATABASE {database}")
          self.conn.database = database
       else:
         raise err
    # Una vez que la base de datos está establecida, creamos la tabla si no existe
    self.cursor.execute('''CREATE TABLE IF NOT EXISTS productos (
      dni INT,
      nombre VARCHAR(255) NOT NULL,
      apellido VARCHAR(255) NOT NULL,
      ciudad VARCHAR(255) NOT NULL,
      imagen_url VARCHAR(255),
      direccion VARCHAR(255) NOT NULL)''')
    self.conn.commit()
   # Cerrar el cursor inicial y abrir uno nuevo con el parámetro dictionary=True
    self.cursor.close()
    self.cursor = self.conn.cursor(dictionary=True)
  
  def listar_productos(self):
     self.cursor.execute("SELECT * FROM productos")
     productos = self.cursor.fetchall()
     return productos


  def consultar_producto(self, dni):
   # Consultamos un producto a partir de su código
     self.cursor.execute(f"SELECT * FROM productos WHERE dni = {dni}")
     return self.cursor.fetchone()

  def mostrar_producto(self, dni):
   # Mostramos los datos de un producto a partir de su código
     producto = self.consultar_producto(dni)
     if producto:
      print("-" * 40)
      print(f"Código.....: {producto['dni']}")
      print(f"Descripción: {producto['nombre']}")
      print(f"apellido...: {producto['apellido']}")
      print(f"ciudad.....: {producto['ciudad']}")
      print(f"Imagen.....: {producto['imagen_url']}")
      print(f"direccion..: {producto['direccion']}")
      print("-" * 40)
     else:
      print("Producto no encontrado.")

  def agregar_producto(self, dni, nombre, apellido, ciudad,imagen, direccion):
      # Verificamos si ya existe un producto con el mismo código
     self.cursor.execute(f"SELECT * FROM productos WHERE dni ={dni}")
     producto_existe = self.cursor.fetchone()
     if producto_existe:
       return False
     #Si no existe, agregamos el nuevo producto a la tabla
     sql = "INSERT INTO productos (dni, nombre, apellido,ciudad, imagen_url, direccion) VALUES (%s, %s, %s, %s, %s, %s)"
     valores = (dni, nombre, apellido, ciudad, imagen, direccion)
     self.cursor.execute(sql, valores)
     self.conn.commit()
     return True
  
  def modificar_producto(self, dni, nueva_nombre, nueva_apellido, nuevo_ciudad, nueva_imagen, nuevo_direccion):
     sql = "UPDATE productos SET nombre = %s, apellido = %s,ciudad = %s, imagen_url = %s, direccion = %s WHERE dni = %s"
     valores = (nueva_nombre, nueva_apellido, nuevo_ciudad, nueva_imagen, nuevo_direccion, dni)
     self.cursor.execute(sql, valores)
     self.conn.commit()
     return self.cursor.rowcount > 0

  def eliminar_producto(self, dni):
    # Eliminamos un producto de la tabla a partir de su código
   self.cursor.execute(f"DELETE FROM productos WHERE dni ={dni}")
   self.conn.commit()
   return self.cursor.rowcount > 0



#--------------------------------------------------------------------
# Cuerpo del programa
#--------------------------------------------------------------------
# Crear una instancia de la clase Catalogo
catalogo = Catalogo(host='grupo2023.mysql.pythonanywhere-services.com', user='grupo2023', password='veinte1234', 
database='grupo2023$miapp')
# Carpeta para guardar las imag  
ruta_destino = '/home/grupo2023/mysite/static/img/'




@app.route("/productos", methods=["GET"])
def listar_productos():
    productos = catalogo.listar_productos()
    return jsonify(productos)



@app.route("/productos/<int:dni>", methods=["GET"])
def mostrar_producto(dni):
   producto = catalogo.consultar_producto(dni)
   if producto:
     return jsonify(producto)
   else:
     return "Producto no encontrado", 404
   

@app.route("/productos", methods=["POST"])
def agregar_producto():
   # Recojo los datos del form
    dni = request.form['dni']
    nombre = request.form['nombre']
    apellido = request.form['apellido']
    ciudad = request.form['ciudad']
    direccion = request.form['direccion'] 
    imagen = request.files['imagen']
    nombre_imagen = secure_filename(imagen.filename)
    nombre_base, extension = os.path.splitext(nombre_imagen)
    nombre_imagen = f"{nombre_base}_{int(time.time())}{extension}"
    imagen.save(os.path.join(ruta_destino, nombre_imagen))
    if catalogo.agregar_producto(dni, nombre, apellido, ciudad, nombre_imagen, direccion):
      return jsonify({"mensaje": "Producto agregado"}), 201
    else:
      return jsonify({"mensaje": "Producto ya existe"}), 400

@ app.route("/productos/<int:dni>", methods=["PUT"])
def modificar_producto(dni):
 # Recojo los datos del form
   nueva_nombre = request.form.get("nombre")
   nueva_apellido = request.form.get("apellido")
   nuevo_ciudad = request.form.get("ciudad")
   nuevo_direccion = request.form.get("direccion")
   # Procesamiento de la imagen
   imagen = request.files['imagen']
   nombre_imagen = secure_filename(imagen.filename)
   nombre_base, extension = os.path.splitext(nombre_imagen)
   nombre_imagen = f"{nombre_base}_{int(time.time())}{extension}"
   imagen.save(os.path.join(ruta_destino, nombre_imagen))
   # Actualización del producto
   if catalogo.modificar_producto(dni, nueva_nombre, nueva_apellido, nuevo_ciudad, nombre_imagen, nuevo_direccion):
    return jsonify({"mensaje": "Producto modificado"}), 200
   else:
    return jsonify({"mensaje": "Producto no encontrado"}), 404


@app.route("/productos/<int:dni>", methods=["DELETE"])
def eliminar_producto(dni):
   # Primero, obtén la información del producto para encontrar la imagen
   producto = catalogo.consultar_producto(dni)
   if producto:
    # Eliminar la imagen asociada si existe
     ruta_imagen = os.path.join(ruta_destino, producto['imagen_url'])
     if os.path.exists(ruta_imagen):
         os.remove(ruta_imagen)
      # Luego, elimina el producto del catálogo
     if catalogo.eliminar_producto(dni):
      return jsonify({"mensaje": "Producto eliminado"}), 200
     else:
      return jsonify({"mensaje": "Error al eliminar el producto"}), 500
   else:
    return jsonify({"mensaje": "Producto no encontrado"}), 404


if __name__ == "__main__":
 app.run(debug=True)
